import Head from 'next/head'
import ProjectList from '../components/ProjectList'
import { Project } from '../models/project-model';
const { Client } = require('pg');


interface Props {
  projects: Project[],
  id: number
}
function projects({ projects, id }: Props) {

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div> Welcome {id}</div>
      <div className="container">
        <div>
          <ProjectList projects={projects}/>
        </div>
      </div>
    </div>
  )
}


export const getServerSideProps = async (context: any) => {
  let projects, id: any;
  let client = new Client({
    user: process.env.DB_USER,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
  });  
  client.connect((err: Error) => {
    if (err) {
      console.log(err);
    } else {
      console.log('connected to PostgreSQL');
    }
  });
  client.query("SELECT user_id FROM users WHERE email = ($1)", [context.req.user.email], (err: Error, results: any) => {
    if (err) {console.log(err)};
    client.query(`SELECT * FROM projects WHERE projects.user_id = ${results.rows[0].user_id}`, (err: Error, results: any) => {
      if (err) {console.log(err)};
      projects = results.rows
    })
  });
  const getId = new Promise((resolve, reject) => {
    resolve(client.query('SELECT user_id FROM users WHERE email = ($1)', [context.req.user.email]));
  })
  await getId
    .then((results: any) => {
      id = results.rows[0].user_id;
    });
    // .then((results: any) => {
    //   console.log(results);
    //   client.query(`SELECT * FROM projects WHERE projects.user_id = ${results}`, (err, result) => {
    //     if (err) throw err;
    //     let projects = result.rows;
    //   })
    // });
  const getProjects = new Promise((resolve, reject) => {
    resolve(client.query(`SELECT * FROM projects WHERE projects.user_id = ${id}`));
  })
  await getProjects
    .then((results: any) => {
      projects = results.rows;
      console.log(projects);
    });

  return {
    props: {
      projects: projects,
    }
  }
}

export default projects;

// use axios to get projects from the database



// const userId = await fetch("http://localhost:3000/success");
// const userIdParsed = userId.json();